name: Auto Create Issue for PR

on:
  pull_request:
    types: [opened]

permissions:
  issues: write
  pull-requests: write
  contents: read
  projects: write

jobs:
  create_issue:
    runs-on: ubuntu-latest

    steps:
    - name: Create Issue
      id: create_issue
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Review PR #${context.payload.pull_request.number}: ${context.payload.pull_request.title}`,
            body: `A new pull request has been created by @${context.payload.pull_request.user.login}.\n\n` +
                  `PR Link: ${context.payload.pull_request.html_url}`,
            labels: ['PR Review'],
            assignees: [context.payload.pull_request.user.login],
          });

          core.setOutput('issueNumber', issue.data.number);

    - name: Add Issue to Project
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issueNumber = "${{ steps.create_issue.outputs.issueNumber }}";

          const projectName = 'WEWESwap Development'; // Your project name
          const columnName = 'Todo'; // Your column name

          // Get the project board
          const projects = await github.rest.projects.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          const project = projects.data.find(p => p.name === projectName);

          if (!project) {
            throw new Error(`Project ${projectName} not found`);
          }

          // Get the columns in the project
          const columns = await github.rest.projects.listColumns({
            project_id: project.id,
          });

          const column = columns.data.find(c => c.name === columnName);

          if (!column) {
            throw new Error(`Column ${columnName} not found in project ${project.name}`);
          }

          // Add the issue to the project column
          await github.rest.projects.createCard({
            column_id: column.id,
            content_id: issueNumber,
            content_type: 'Issue'
          });
